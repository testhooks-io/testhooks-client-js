/* tslint:disable */
/* eslint-disable */
/**
 * Devhooks API
 *  ## About Create stateful HTTP endpoints that can dynamically respond to inbound requests based on request matching, invocation count, and response rules.   Requests are stored in sequence for application debugging and analysis.  ## Use cases - Test webhook integrations with mockable responses, delays, and exceptions. - If your application sends data to other services (via Webhooks) mock external server behaviour and verify you application\'s behaviour.  ## Alternatives One can mock HTTP calls in unit tests but testing external URLs in smoketests or integration suites is difficult. There are existing mock server projects that can be deployed in containers but project setup and DNS routing is a barrier.  ## Future support - Additional protocols such as MQTT (IOT), SMS, Email, FTP, SMTP, and more. - Scripting for serverless lambdas without AWS or bundling. - Market place for common actions such as \"Notify slack\", \"Send me an SMS\", \"Send me an email\" - Tracking applications using the request history         
 *
 * The version of the OpenAPI document: 0.0.1-ALPHA
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RequestParameterRule
 */
export interface RequestParameterRule {
    /**
     * 
     * @type {string}
     * @memberof RequestParameterRule
     */
    propertyName?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestParameterRule
     */
    should?: RequestParameterRuleShouldEnum;
    /**
     * 
     * @type {string}
     * @memberof RequestParameterRule
     */
    value?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestParameterRule
     */
    flags?: Array<RequestParameterRuleFlagsEnum>;
}

/**
* @export
* @enum {string}
*/
export enum RequestParameterRuleShouldEnum {
    CONTAIN = 'CONTAIN',
    NOT_CONTAIN = 'NOT_CONTAIN',
    EQUAL = 'EQUAL',
    NOT_EQUAL = 'NOT_EQUAL',
    MATCH_REGEX = 'MATCH_REGEX',
    NOT_MATCH_REGEX = 'NOT_MATCH_REGEX'
}/**
* @export
* @enum {string}
*/
export enum RequestParameterRuleFlagsEnum {
    IGNORE_CASE = 'IGNORE_CASE',
    URL_DECODE = 'URL_DECODE',
    TRIM = 'TRIM'
}

export function RequestParameterRuleFromJSON(json: any): RequestParameterRule {
    return RequestParameterRuleFromJSONTyped(json, false);
}

export function RequestParameterRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestParameterRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'propertyName': !exists(json, 'propertyName') ? undefined : json['propertyName'],
        'should': !exists(json, 'should') ? undefined : json['should'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'flags': !exists(json, 'flags') ? undefined : json['flags'],
    };
}

export function RequestParameterRuleToJSON(value?: RequestParameterRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'propertyName': value.propertyName,
        'should': value.should,
        'value': value.value,
        'flags': value.flags,
    };
}


